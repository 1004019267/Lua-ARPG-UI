//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaBattleManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaBattleManager), typeof(Singleton<LuaBattleManager>));
		L.RegFunction("BattleStart", BattleStart);
		L.RegFunction("Update", Update);
		L.RegFunction("BattleEnd", BattleEnd);
		L.RegFunction("New", _CreateLuaBattleManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaBattleManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaBattleManager obj = new LuaBattleManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaBattleManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BattleStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaBattleManager obj = (LuaBattleManager)ToLua.CheckObject<LuaBattleManager>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.BattleStart(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaBattleManager obj = (LuaBattleManager)ToLua.CheckObject<LuaBattleManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Update(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BattleEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaBattleManager obj = (LuaBattleManager)ToLua.CheckObject<LuaBattleManager>(L, 1);
			obj.BattleEnd();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

