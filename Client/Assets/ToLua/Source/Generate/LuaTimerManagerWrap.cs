//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaTimerManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaTimerManager), typeof(Singleton<LuaTimerManager>));
		L.RegFunction("Invoke", Invoke);
		L.RegFunction("Update", Update);
		L.RegFunction("Clear", Clear);
		L.RegFunction("New", _CreateLuaTimerManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaTimerManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaTimerManager obj = new LuaTimerManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaTimerManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Invoke(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<System.Action>(L, 3))
			{
				LuaTimerManager obj = (LuaTimerManager)ToLua.CheckObject<LuaTimerManager>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				System.Action arg1 = (System.Action)ToLua.ToObject(L, 3);
				obj.Invoke(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<LuaInterface.LuaFunction>(L, 3))
			{
				LuaTimerManager obj = (LuaTimerManager)ToLua.CheckObject<LuaTimerManager>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				obj.Invoke(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<LuaInterface.LuaFunction, bool>(L, 3))
			{
				LuaTimerManager obj = (LuaTimerManager)ToLua.CheckObject<LuaTimerManager>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				obj.Invoke(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<System.Action, bool>(L, 3))
			{
				LuaTimerManager obj = (LuaTimerManager)ToLua.CheckObject<LuaTimerManager>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				System.Action arg1 = (System.Action)ToLua.ToObject(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				obj.Invoke(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaTimerManager.Invoke");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaTimerManager obj = (LuaTimerManager)ToLua.CheckObject<LuaTimerManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Update(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaTimerManager obj = (LuaTimerManager)ToLua.CheckObject<LuaTimerManager>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

